cmake_minimum_required(VERSION 3.20)

set_property(GLOBAL PROPERTY USE_FOLDERS ON)
set_property(GLOBAL PROPERTY PREDEFINED_TARGETS_FOLDER "utility")

# language settings
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_EXTENSIONS OFF)

project(cg_projects LANGUAGES C CXX VERSION 1.1)

include("cmake/configure_project.cmake")
include("cmake/hardlink_shaders.cmake")

if (EMSCRIPTEN)
    include("cmake/preload_files.cmake")
endif()

# build in source in not recommended
if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
    message(WARNING "The binary directory of CMake should not \
                     be the same as source directory")
endif()

# build type
if (NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release)
endif()

# disable max/min definition in windows
if (WIN32)
    add_definitions(-DNOMINMAX -D_USE_MATH_DEFINES)
endif()

# copy media data to the build directory
file(COPY "media/" DESTINATION "media")

# add libraries
if(EMSCRIPTEN)
    message(STATUS "use GLFW in Emscripten")
    message(STATUS "use OpenGL/ES in Emscripten")
else()
    set(GLFW_BUILD_EXAMPLES OFF)
    set(GLFW_BUILD_TESTS OFF)
    set(GLFW_BUILD_DOCS OFF)
    add_subdirectory(./external/glfw)
    set_target_properties(glfw PROPERTIES FOLDER "lib/glfw")
    set_target_properties(uninstall PROPERTIES FOLDER "lib/glfw")
    set_target_properties(update_mappings PROPERTIES FOLDER "lib/glfw")

    add_subdirectory(./external/glad)
    set_target_properties(glad PROPERTIES FOLDER "lib")
endif()

add_subdirectory(./external/glm)
set_target_properties(glm PROPERTIES FOLDER "lib/glm")

add_subdirectory(./external/tinyobjloader)
set_target_properties(tinyobjloader PROPERTIES FOLDER "lib")

add_subdirectory(./external/imgui)
set_target_properties(imgui PROPERTIES FOLDER "lib")

add_subdirectory(./external/stb)
set_target_properties(stb PROPERTIES FOLDER "lib")

set(TINYGLTF_BUILD_LOADER_EXAMPLE OFF CACHE INTERNAL "" FORCE)
set(TINYGLTF_HEADER_ONLY OFF CACHE INTERNAL "" FORCE)
set(TINYGLTF_INSTALL OFF CACHE INTERNAL "" FORCE)
add_subdirectory(./external/tinygltf)
set_target_properties(tinygltf PROPERTIES FOLDER "lib")

add_subdirectory(./external/meshoptimizer)
set_target_properties(meshoptimizer PROPERTIES FOLDER "lib")

set(SPIRV_HEADERS_ENABLE_TESTS OFF CACHE INTERNAL "Skip building SPIRV-Headers tests" FORCE)
add_subdirectory(./external/SPIRV-HEADERS)

set(SPIRV_SKIP_EXECUTABLES ON CACHE BOOL "Skip building SPIRV-Tools executables" FORCE)
set(SPIRV_SKIP_TESTS ON CACHE BOOL "Skip building SPIRV-Tools tests" FORCE)
add_subdirectory(./external/SPIRV-Tools)
set_target_properties(spirv-tools-build-version PROPERTIES FOLDER "lib/spirv-tools")
set_target_properties(spirv-tools-header-DebugInfo PROPERTIES FOLDER "lib/spirv-tools")
set_target_properties(spirv-tools-header-NonSemanticShaderDebugInfo100 PROPERTIES FOLDER "lib/spirv-tools")
set_target_properties(spirv-tools-header-OpenCLDebugInfo100 PROPERTIES FOLDER "lib/spirv-tools")
set_target_properties(spv-tools-cldi100 PROPERTIES FOLDER "lib/spirv-tools")
set_target_properties(spv-tools-clspvreflection PROPERTIES FOLDER "lib/spirv-tools")
set_target_properties(spv-tools-debuginfo PROPERTIES FOLDER "lib/spirv-tools")
set_target_properties(spv-tools-shdi100 PROPERTIES FOLDER "lib/spirv-tools")
set_target_properties(spv-tools-spv-amd-gs PROPERTIES FOLDER "lib/spirv-tools")
set_target_properties(spv-tools-spv-amd-sb PROPERTIES FOLDER "lib/spirv-tools")
set_target_properties(spv-tools-spv-amd-sevp PROPERTIES FOLDER "lib/spirv-tools")
set_target_properties(spv-tools-spv-amd-stm PROPERTIES FOLDER "lib/spirv-tools")
set_target_properties(spv-tools-vkspreflection PROPERTIES FOLDER "lib/spirv-tools")
set_target_properties(SPIRV-Tools-diff PROPERTIES FOLDER "lib/spirv-tools")
set_target_properties(SPIRV-Tools-link PROPERTIES FOLDER "lib/spirv-tools")
set_target_properties(SPIRV-Tools-lint PROPERTIES FOLDER "lib/spirv-tools")
set_target_properties(SPIRV-Tools-opt PROPERTIES FOLDER "lib/spirv-tools")
set_target_properties(SPIRV-Tools-reduce PROPERTIES FOLDER "lib/spirv-tools")
set_target_properties(SPIRV-Tools-shared PROPERTIES FOLDER "lib/spirv-tools")
set_target_properties(SPIRV-Tools-static PROPERTIES FOLDER "lib/spirv-tools")
set_target_properties(spirv-tools-vimsyntax PROPERTIES FOLDER "lib/spirv-tools")
set_target_properties(core_tables PROPERTIES FOLDER "lib/spirv-tools")
set_target_properties(enum_string_mapping PROPERTIES FOLDER "lib/spirv-tools")
set_target_properties(extinst_tables PROPERTIES FOLDER "lib/spirv-tools")
set_target_properties(spirv-tools-pkg-config PROPERTIES FOLDER "lib/spirv-tools")

set(SPIRV_CROSS_ENABLE_TESTS OFF CACHE BOOL "Skip building SPIRV-Cross tests" FORCE)
add_subdirectory(./external/SPIRV-Cross)
set_target_properties(spirv-cross PROPERTIES FOLDER "lib/spirv-cross")
set_target_properties(spirv-cross-c PROPERTIES FOLDER "lib/spirv-cross")
set_target_properties(spirv-cross-core PROPERTIES FOLDER "lib/spirv-cross")
set_target_properties(spirv-cross-cpp PROPERTIES FOLDER "lib/spirv-cross")
set_target_properties(spirv-cross-glsl PROPERTIES FOLDER "lib/spirv-cross")
set_target_properties(spirv-cross-hlsl PROPERTIES FOLDER "lib/spirv-cross")
set_target_properties(spirv-cross-msl PROPERTIES FOLDER "lib/spirv-cross")
set_target_properties(spirv-cross-reflect PROPERTIES FOLDER "lib/spirv-cross")
set_target_properties(spirv-cross-util PROPERTIES FOLDER "lib/spirv-cross")

set(GLSLANG_TESTS OFF CACHE BOOL "Skip building glslang tests" FORCE)
add_subdirectory(./external/glslang)
set_target_properties(GenericCodeGen PROPERTIES FOLDER "lib/glslang")
set_target_properties(glslang PROPERTIES FOLDER "lib/glslang")
set_target_properties(glslang-default-resource-limits PROPERTIES FOLDER "lib/glslang")
set_target_properties(MachineIndependent PROPERTIES FOLDER "lib/glslang")
set_target_properties(OSDependent PROPERTIES FOLDER "lib/glslang")
set_target_properties(GenericCodeGen PROPERTIES FOLDER "lib/glslang")
set_target_properties(SPIRV PROPERTIES FOLDER "lib/glslang")
set_target_properties(SPVRemapper PROPERTIES FOLDER "lib/glslang")
set_target_properties(glslang-standalone PROPERTIES FOLDER "lib/glslang")
set_target_properties(spirv-remap PROPERTIES FOLDER "lib/glslang")

set(SHADERC_SKIP_TESTS ON CACHE INTERNAL "Skip building tests" FORCE)
set(SHADERC_SKIP_EXAMPLES ON CACHE INTERNAL "Skip building examples" FORCE)
set(SHADERC_SKIP_COPYRIGHT_CHECK ON CACHE INTERNAL "Skip copyright check" FORCE)
set(SHADERC_ENABLE_SHARED_CRT ON CACHE INTERNAL "Enable Shaderc Shared CRT" FORCE)
add_subdirectory(./external/shaderc)
set_target_properties(add-copyright PROPERTIES FOLDER "lib/shaderc")
set_target_properties(build-version PROPERTIES FOLDER "lib/shaderc")
set_target_properties(glslc PROPERTIES FOLDER "lib/shaderc")
set_target_properties(glslc_exe PROPERTIES FOLDER "lib/shaderc")
set_target_properties(shaderc PROPERTIES FOLDER "lib/shaderc")
set_target_properties(shaderc_combined PROPERTIES FOLDER "lib/shaderc")
set_target_properties(shaderc_combined-pkg-config PROPERTIES FOLDER "lib/shaderc")
set_target_properties(shaderc_shared PROPERTIES FOLDER "lib/shaderc")
set_target_properties(shaderc_static-pkg-config PROPERTIES FOLDER "lib/shaderc")
set_target_properties(shaderc_util PROPERTIES FOLDER "lib/shaderc")
set_target_properties(shaderc-pkg-config PROPERTIES FOLDER "lib/shaderc")
set_target_properties(testdata PROPERTIES FOLDER "lib/shaderc")

# add projects
set(PROJECTS_DIR ${CMAKE_SOURCE_DIR}/projects)
file(GLOB targets LIST_DIRECTORIES true
     RELATIVE ${PROJECTS_DIR} "${PROJECTS_DIR}/*")

foreach (target ${targets})
    set(TARGET_ABSOLUTE_PATH ${PROJECTS_DIR}/${target})
    if (NOT ((IS_DIRECTORY ${TARGET_ABSOLUTE_PATH})
            AND (EXISTS "${TARGET_ABSOLUTE_PATH}/CMakeLists.txt")))
        continue()
    endif()
    add_subdirectory(${PROJECTS_DIR}/${target})
    if (${target} MATCHES "project*")
        set_target_properties(${target} PROPERTIES FOLDER "project")
    elseif (${target} MATCHES "bonus")
        set_target_properties(${target} PROPERTIES FOLDER "bonus")
    else()
        set_target_properties(${target} PROPERTIES FOLDER "demo")
    endif()
endforeach()